name: Build Project

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows
            os: windows-latest
          
          - name: macOS
            os: macos-latest

          - name: Linux
            os: ubuntu-latest
    
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # - name: Deps (win)
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install cmake pkgconfiglite mingw -y

      - name: Deps (mac)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja

      - name: Deps (lin)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git make \
          pkg-config cmake ninja-build clang \
          libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
          libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev \
          libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev \
          libc++17-dev libc++abi-17-dev

      - name: Setup MSYS2 (win)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            autotools base-devel bzip2 coreutils git gzip tar xz zip
            perl-List-MoreUtils perl-XML-Parser
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-osslsigncode
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-eigen3
            mingw-w64-x86_64-dlfcn
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-gettext-tools
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-lame
            mingw-w64-x86_64-libarchive
            mingw-w64-x86_64-libepoxy
            mingw-w64-x86_64-libexif
            mingw-w64-x86_64-libimagequant
            mingw-w64-x86_64-libsamplerate
            mingw-w64-x86_64-libtheora
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-libvpx
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-onevpl
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-opus
            mingw-w64-x86_64-potrace
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-rubberband
            mingw-w64-x86_64-sox
            mingw-w64-x86_64-svt-av1
            mingw-w64-x86_64-vid.stab
            mingw-w64-x86_64-x264
            mingw-w64-x86_64-x265
            mingw-w64-x86_64-zimg

      - name: Setup FFmpeg (win)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2025-05-31-14-01/ffmpeg-n7.1.1-20-g9373b442a6-win64-lgpl-shared-7.1.zip -o ffmpeg.zip
          mkdir -p ffmpeg
          unzip -q ffmpeg.zip -d ffmpeg
          echo "${{ github.workspace }}/ffmpeg/bin" >> $GITHUB_PATH

      - name: Setup FFmpeg (lin)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2025-05-31-14-01/ffmpeg-n7.1.1-20-g9373b442a6-linux64-lgpl-shared-7.1.tar.xz -o ffmpeg.tar.xz
          mkdir -p ffmpeg
          tar -xf ffmpeg.tar.xz -C ffmpeg --strip-components=1
          echo "${{ github.workspace }}/ffmpeg/bin" >> $GITHUB_PATH

      - name: Setup FFmpeg (mac)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install ffmpeg@7
          brew link --force ffmpeg@7

      - name: Compile (win)
        shell: msys2 {0}
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build \
            -G "MinGW Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/mingw64/bin/gcc \
            -DCMAKE_CXX_COMPILER=/mingw64/bin/g++
          
          cmake --build build --config Release

      - name: Compile (everyone else)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
