name: Build Project

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows
            os: windows-latest
            ffmpeg: ffmpeg-n7.1.1-20-g9373b442a6-win64-lgpl-shared-7.1.zip
            plat: windows-x64
          
          - name: macOS
            os: macos-latest
            ffmpeg: ffmpeg-n7.1.1-20-g9373b442a6-macos64-lgpl-shared-7.1.tar.xz
            plat: macos-arm64

          - name: Linux
            os: ubuntu-latest
            ffmpeg: ffmpeg-n7.1.1-20-g9373b442a6-linux64-lgpl-shared-7.1.tar.xz
            plat: linux-x64
    
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Deps (win)
        if: runner.os == 'Windows'
        run: |
          choco install cmake pkgconfiglite mingw -y

      - name: Deps (mac)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja

      - name: Deps (lin)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git make \
          pkg-config cmake ninja-build clang \
          libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
          libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev \
          libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev

      - name: Download FFmpeg
        run: |
          mkdir -p third_party/ffmpeg/${{ matrix.config.plat }}
          url="https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2025-05-31-14-01/${{ matrix.config.ffmpeg }}"
          echo "Downloading $url"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            curl -L "$url" -o ffmpeg.zip
            unzip -q ffmpeg.zip -d ffmpeg
            cp -r ffmpeg/*/include third_party/ffmpeg/
            cp -r ffmpeg/*/lib third_party/ffmpeg/${{ matrix.config.plat }}/
            cp -r ffmpeg/*/bin third_party/ffmpeg/${{ matrix.config.plat }}/
          else
            curl -L "$url" -o ffmpeg.tar.xz
            tar -xf ffmpeg.tar.xz
            cp -r ffmpeg-*/include third_party/ffmpeg/
            cp -r ffmpeg-*/lib third_party/ffmpeg/${{ matrix.config.plat }}/
            cp -r ffmpeg-*/bin third_party/ffmpeg/${{ matrix.config.plat }}/ || true
          fi
          ls -R third_party/ffmpeg

      - name: Configure (win)
        if: runner.os == 'Windows'
        run: cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release

      - name: Configure (everyone else)
        if: runner.os != 'Windows'
        run: cmake -S . -B build -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release

      - name: Compile
        run: cmake --build build --config Release
